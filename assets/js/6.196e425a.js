(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{204:function(t,a,r){"use strict";r.r(a);var e=r(0),i=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"_23-javascript-design-patterns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_23-javascript-design-patterns","aria-hidden":"true"}},[t._v("#")]),t._v(" 23 JavaScript design patterns")]),r("p",[t._v("设计模式最初被分为三类：")]),r("ul",[r("li",[t._v("Creational Patterns 创建型模式")]),r("li",[t._v("Structural Patterns 结构型模式")]),r("li",[t._v("Behavioral  行为型模式")])]),r("h2",{attrs:{id:"creational-patterns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#creational-patterns","aria-hidden":"true"}},[t._v("#")]),t._v(" Creational Patterns")]),r("p",[t._v("这些模式概述了创建对象和管理其生命周期的许多方法。在特定场景下需要决定创建哪种对象时，创建型模式给程序以更多的灵活性。")]),r("p",[t._v("有下列模式：")]),r("ul",[r("li",[t._v("Abstract Factory pattern 抽象工厂模式")]),r("li",[t._v("Builder pattern 建造者模式")]),r("li",[t._v("Factory Method pattern 工厂方法模式")]),r("li",[t._v("Singleton pattern 单例模式")]),r("li",[t._v("Prototype pattern 原型模式")])]),r("h3",{attrs:{id:"_1-抽象工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-抽象工厂模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 抽象工厂模式")]),r("p",[t._v("就像一个工厂，但是所有事情都被封装了起来：")]),r("ul",[r("li",[t._v("给对象进行排序的方法")]),r("li",[t._v("建立对象的工厂")]),r("li",[t._v("最终的对象")]),r("li",[t._v("最终的对象包含使用策略模式的对象")])]),r("p",[t._v("策略模式只使用所谓的组合，或者换句话说，它的类字段实际上是对象本身。")]),r("h4",{attrs:{id:"抽象工厂模式能做什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式能做什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽象工厂模式能做什么？")]),r("h3",{attrs:{id:"_2-建造者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-建造者模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 建造者模式")])])}],!1,null,null,null);a.default=i.exports}}]);